package coverage

import (
	"fmt"
	"os"
	"testing"
	"time"
	"sort"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestPeople(t *testing.T) {
	tests := map[string]People{
		"People ascending":               {
										{"Adam", "Sendler", time.Now() },
										{"Ben",  "Stiller", time.Now().Add(time.Second * 4) },
										{"Cris", "Lambert", time.Now().Add(time.Second * 8) },
	},
		"People descending":               {
										{"Cris", "Lambert", time.Now().Add(time.Second * 8) },
										{"Ben",  "Stiller", time.Now().Add(time.Second * 4) },
										{"Adam", "Sendler", time.Now() },
	},
		"People mixed1":               {
										{"Cris", "Lambert", time.Now().Add(time.Second * 8) },
										{"Adam", "Sendler", time.Now() },
										{"Ben",  "Stiller", time.Now().Add(time.Second * 4) },
	},
		"People mixed2":               {
										{"Adam", "Sendler", time.Now() },
										{"Ben",  "Sendler",  time.Now() },
										{"Cris", "Sendler", time.Now() },
	},
		"People same":               {
										{"Adam", "Sendler", time.Now() },
										{"Adam", "Sendler", time.Now() },
										{"Adam", "Sendler", time.Now() },
	},
	}
	
	for name, tt := range tests {
		t.Run(name, func(t *testing.T) {

				sort.Sort(People(tt))
				fmt.Println("Sorted People is: ", tt)
				// t.Errorf("Problem during creation of matrix: %s", err.Error())
		})
	}
}

func TestNew(t *testing.T) {
	tests := map[string]string{
		"normal matrix":               "0 0 0\n1 1 1\n2 2 2",
		"rows with different length":  "0 0 0\n1 1\n2",
		"contained not a number":      "A 0 0\n1 1 1\n2 2 2",
	}
	
	for name, tt := range tests {
		t.Run(name, func(t *testing.T) {
			_, err := New(tt)
			if err != nil {
				fmt.Println("Error is:", err)
				// t.Errorf("Problem during creation of matrix: %s", err.Error())
			}
		})
	}
}

func TestRows(t *testing.T) {

	var initValue string = "0 0 0\n1 1 1\n2 2 2"

	m ,_ := New(initValue)

	temp := m.Rows()
	// if err != nil {
		fmt.Println("Res is:", temp)
		// t.Errorf("Problem during creation of matrix: %s", err.Error())
	// }
}


func TestCols(t *testing.T) {

	var initValue string = "0 0 0\n1 1 1\n2 2 2"

	m ,_ := New(initValue)

	temp := m.Cols()
	// if err != nil {
		fmt.Println("Res is:", temp)
		// t.Errorf("Problem during creation of matrix: %s", err.Error())
	// }
}

func TestSet(t *testing.T) {

	var initValue string = "0 0 0\n1 1 1\n2 2 2"

	m ,_ := New(initValue)

	var setValue = 55;
	// Test case 1: Correct input data
	res := m.Set(1, 1, setValue)
	fmt.Println("Res is:", res)

	// Test case 2: Incorrect input data
	res = m.Set(255, -1, setValue)
	fmt.Println("Res is:", res)


}